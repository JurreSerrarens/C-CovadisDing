@page "/users"
@attribute [StreamRendering]
@inject HttpClient Http
@using Covadis.Shared;
@using System.Text.Json

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (users == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Email</th>
                <th>Password</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in users)
            {
                <tr>
                    <td>@user.name</td>
                    <td>@user.email</td>
                    <td>@user.password</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private UserReceive[]? users;


    protected override async Task OnInitializedAsync()
    {
        var response = Http.GetStringAsync($"https://localhost:7261/User");
        string jsonData = response.Result;
        Console.WriteLine(jsonData);
        users = JsonSerializer.Deserialize<UserReceive[]>(jsonData);


    }

    public async Task<UserReceive[]> GetEmployeeAsync()
    {
        string baseUrl = "https://localhost:7261/";
        //var response = await Http.GetAsync($"{baseUrl}/User");
        var response = await Http.GetAsync("User");
        response.EnsureSuccessStatusCode();
        var responseBody = await response.Content.ReadAsStringAsync();
        return JsonSerializer.Deserialize<UserReceive[]>(responseBody);
    }
}
