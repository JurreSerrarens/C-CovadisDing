@page "/users"
@attribute [StreamRendering]
@inject HttpClient Http
@using Covadis.Shared;
@using System.Text.Json

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (users == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in users)
            {
                <tr>
                    <td>@user.Name</td>
                    <td>@user.Email</td>
                    <td>@user.Password</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private UserDto[]? users;


    protected override async Task OnInitializedAsync()
    {
        //users = GetEmployeeAsync().Result;
        string baseUrl = "https://localhost:7261/";
        var response = await Http.GetAsync($"{baseUrl}/User");
        response.EnsureSuccessStatusCode();
        var responseBody = await response.Content.ReadAsStringAsync();
        users = JsonSerializer.Deserialize<UserDto[]>(responseBody);

    }

    public async Task<UserDto[]> GetEmployeeAsync()
    {
        string baseUrl = "https://localhost:7261/";
        //var response = await Http.GetAsync($"{baseUrl}/User");
        var response = await Http.GetAsync("User");
        response.EnsureSuccessStatusCode();
        var responseBody = await response.Content.ReadAsStringAsync();
        return JsonSerializer.Deserialize<UserDto[]>(responseBody);
    }
}
